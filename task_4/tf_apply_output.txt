Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

module.ec2.data.aws_vpc.vpc: Refreshing state...
module.sg.data.aws_vpc.vpc: Refreshing state...
module.ec2.data.aws_caller_identity.current: Refreshing state...
module.sg.data.aws_caller_identity.current: Refreshing state...
module.ec2.data.aws_ami.ami: Refreshing state...
module.ec2.data.aws_subnet.subnet: Refreshing state...

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.ec2.aws_instance.instance[0] will be created
  + resource "aws_instance" "instance" {
      + ami                                  = "ami-0f9fc25dd2506cf6d"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "my_custom_key_tfvars"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = (known after apply)
      + tags_all                             = (known after apply)
      + tenancy                              = (known after apply)
      + user_data                            = "dc4469cd532fe7b28d2da3a0bd883e825bd95980"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp3"
        }
    }

  # module.ec2.aws_key_pair.ssh_key[0] will be created
  + resource "aws_key_pair" "ssh_key" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "my_custom_key_tfvars"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKHTblBzJfcdwSNQO9o8FO/YHpfMBDzsjj8q70bEkaBh1+c1sfdun8RXrFZgJQIXAlYAzzWsgNhAEvEDJk8fjVEJyos6XbrGCn14GQRXKplhov9EJNmK1LI6oC3QmHiV2lU5/VwXltWyDg8uvgglIk5lspQa1mdqWFPURZYKXfCQHLW+zSmGT/PMeqVT6LmDnqNSi5RI9ys7l8R6RbMXSaKOHm+5DqVzrMY5NLg27N2RQ6ZJwpc2oyXcJefjozQWxDNtEmRTB4bP+mG/nwfyG19Z0oe7rRxsnTVSl335x6FtQU0hhIfYo+X8wtT6GeayWoy3qE3MhmtDHO08wM9XKwXr/C/EkpH4rgobB9HxrwTelinCObfvW1piZtOEGmAv5t/MUfvl6n7hbk4fYtyBrXYQ6VgeKeNr3AnjiOjWCro19+kzgJ+WkWn8dH9dUel1ypRPWeaiHHD7rWNIqK6GYg15P1YECqw+7a786NcetcmMSsJF4UovjNX4UtpcjjTfs= Semen_Shvets@EPRUMOSW0537"
      + tags            = {
          + "AWS_Account_ID" = "523926058979"
          + "First_name"     = "Semen"
          + "Last_name"      = "Shvets"
          + "Tag_Source"     = "tfvars_file"
        }
      + tags_all        = {
          + "AWS_Account_ID" = "523926058979"
          + "First_name"     = "Semen"
          + "Last_name"      = "Shvets"
          + "Tag_Source"     = "tfvars_file"
        }
    }

  # module.ec2.null_resource.data_from_instance[0] will be created
  + resource "null_resource" "data_from_instance" {
      + id = (known after apply)
    }

  # module.sg.aws_security_group.sg[0] will be created
  + resource "aws_security_group" "sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "my_sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "AWS_Account_ID" = "523926058979"
          + "First_name"     = "Semen"
          + "Last_name"      = "Shvets"
          + "Name"           = "my_sg"
          + "Tag_Source"     = "tfvars_file"
        }
      + tags_all               = {
          + "AWS_Account_ID" = "523926058979"
          + "First_name"     = "Semen"
          + "Last_name"      = "Shvets"
          + "Name"           = "my_sg"
          + "Tag_Source"     = "tfvars_file"
        }
      + vpc_id                 = "vpc-00dc32518740e437f"
    }

  # module.sg.aws_security_group_rule.my_sg_egress["0"] will be created
  + resource "aws_security_group_rule" "my_sg_egress" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # module.sg.aws_security_group_rule.my_sg_ingress["22"] will be created
  + resource "aws_security_group_rule" "my_sg_ingress" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "SSH"
      + from_port                = 22
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

  # module.sg.aws_security_group_rule.my_sg_ingress["443"] will be created
  + resource "aws_security_group_rule" "my_sg_ingress" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "HTTPS"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.sg.aws_security_group_rule.my_sg_ingress["80"] will be created
  + resource "aws_security_group_rule" "my_sg_ingress" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "HTTP80"
      + from_port                = 80
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 80
      + type                     = "ingress"
    }

  # module.sg.aws_security_group_rule.my_sg_ingress["8080"] will be created
  + resource "aws_security_group_rule" "my_sg_ingress" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "HTTP8080"
      + from_port                = 8080
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 8080
      + type                     = "ingress"
    }

Plan: 9 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + instances_id         = [
      + (known after apply),
    ]
  + instances_private_ip = [
      + (known after apply),
    ]
  + instances_public_ip  = [
      + (known after apply),
    ]
  + sg                   = [
      + {
          + arn                    = (known after apply)
          + description            = "Managed by Terraform"
          + egress                 = (known after apply)
          + id                     = (known after apply)
          + ingress                = (known after apply)
          + name                   = "my_sg"
          + name_prefix            = (known after apply)
          + owner_id               = (known after apply)
          + revoke_rules_on_delete = false
          + tags                   = {
              + "AWS_Account_ID" = "523926058979"
              + "First_name"     = "Semen"
              + "Last_name"      = "Shvets"
              + "Name"           = "my_sg"
              + "Tag_Source"     = "tfvars_file"
            }
          + tags_all               = {
              + "AWS_Account_ID" = "523926058979"
              + "First_name"     = "Semen"
              + "Last_name"      = "Shvets"
              + "Name"           = "my_sg"
              + "Tag_Source"     = "tfvars_file"
            }
          + timeouts               = null
          + vpc_id                 = "vpc-00dc32518740e437f"
        },
    ]
  + sg_id                = (known after apply)
  + sgr_egress           = {
      + 22   = {
          + cidr_blocks              = [
              + "0.0.0.0/0",
            ]
          + description              = "SSH"
          + from_port                = 22
          + id                       = (known after apply)
          + ipv6_cidr_blocks         = null
          + prefix_list_ids          = null
          + protocol                 = "tcp"
          + security_group_id        = (known after apply)
          + self                     = false
          + source_security_group_id = (known after apply)
          + to_port                  = 22
          + type                     = "ingress"
        }
      + 443  = {
          + cidr_blocks              = [
              + "0.0.0.0/0",
            ]
          + description              = "HTTPS"
          + from_port                = 443
          + id                       = (known after apply)
          + ipv6_cidr_blocks         = null
          + prefix_list_ids          = null
          + protocol                 = "tcp"
          + security_group_id        = (known after apply)
          + self                     = false
          + source_security_group_id = (known after apply)
          + to_port                  = 443
          + type                     = "ingress"
        }
      + 80   = {
          + cidr_blocks              = [
              + "0.0.0.0/0",
            ]
          + description              = "HTTP80"
          + from_port                = 80
          + id                       = (known after apply)
          + ipv6_cidr_blocks         = null
          + prefix_list_ids          = null
          + protocol                 = "tcp"
          + security_group_id        = (known after apply)
          + self                     = false
          + source_security_group_id = (known after apply)
          + to_port                  = 80
          + type                     = "ingress"
        }
      + 8080 = {
          + cidr_blocks              = [
              + "0.0.0.0/0",
            ]
          + description              = "HTTP8080"
          + from_port                = 8080
          + id                       = (known after apply)
          + ipv6_cidr_blocks         = null
          + prefix_list_ids          = null
          + protocol                 = "tcp"
          + security_group_id        = (known after apply)
          + self                     = false
          + source_security_group_id = (known after apply)
          + to_port                  = 8080
          + type                     = "ingress"
        }
    }
  + sgr_ingress          = {
      + 22   = {
          + cidr_blocks              = [
              + "0.0.0.0/0",
            ]
          + description              = "SSH"
          + from_port                = 22
          + id                       = (known after apply)
          + ipv6_cidr_blocks         = null
          + prefix_list_ids          = null
          + protocol                 = "tcp"
          + security_group_id        = (known after apply)
          + self                     = false
          + source_security_group_id = (known after apply)
          + to_port                  = 22
          + type                     = "ingress"
        }
      + 443  = {
          + cidr_blocks              = [
              + "0.0.0.0/0",
            ]
          + description              = "HTTPS"
          + from_port                = 443
          + id                       = (known after apply)
          + ipv6_cidr_blocks         = null
          + prefix_list_ids          = null
          + protocol                 = "tcp"
          + security_group_id        = (known after apply)
          + self                     = false
          + source_security_group_id = (known after apply)
          + to_port                  = 443
          + type                     = "ingress"
        }
      + 80   = {
          + cidr_blocks              = [
              + "0.0.0.0/0",
            ]
          + description              = "HTTP80"
          + from_port                = 80
          + id                       = (known after apply)
          + ipv6_cidr_blocks         = null
          + prefix_list_ids          = null
          + protocol                 = "tcp"
          + security_group_id        = (known after apply)
          + self                     = false
          + source_security_group_id = (known after apply)
          + to_port                  = 80
          + type                     = "ingress"
        }
      + 8080 = {
          + cidr_blocks              = [
              + "0.0.0.0/0",
            ]
          + description              = "HTTP8080"
          + from_port                = 8080
          + id                       = (known after apply)
          + ipv6_cidr_blocks         = null
          + prefix_list_ids          = null
          + protocol                 = "tcp"
          + security_group_id        = (known after apply)
          + self                     = false
          + source_security_group_id = (known after apply)
          + to_port                  = 8080
          + type                     = "ingress"
        }
    }
  + ssh_key_arn          = (known after apply)
  + subnet_arn           = "arn:aws:ec2:us-east-1:523926058979:subnet/subnet-0c1f6240e7db2f616"
  + vpc_arn              = "arn:aws:ec2:us-east-1:523926058979:vpc/vpc-00dc32518740e437f"

------------------------------------------------------------------------
